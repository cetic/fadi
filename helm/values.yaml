---
# Default values for FADI.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
spark:
  enabled: false
  Master:
    Name: spark-master
  WebUi:
    Name: spark-webui
  Worker:
    Name: spark-worker
  Zeppelin:
    Name: spark-zeppelin
    Replicas: 0

superset:
  enabled: true
  persistence:
    enabled: true
  service:
    type: LoadBalancer

# ------ auth ------

  configFile: |-
  
    from flask_appbuilder.security.manager import AUTH_DB,AUTH_LDAP

    #---------------------------------------------------------
    # Superset specific config
    #---------------------------------------------------------

    ROW_LIMIT = 5000
    SUPERSET_WORKERS = 2
    SUPERSET_WEBSERVER_PORT = 8088
    #---------------------------------------------------------
    #---------------------------------------------------------
    # Flask App Builder configuration
    #---------------------------------------------------------
    # Your App secret key
    SECRET_KEY = '\2\1thisismyscretkey\1\2\e\y\y\h'
    # The SQLAlchemy connection string to your database backend
    # This connection defines the path to the database that stores your
    # superset metadata (slices, connections, tables, dashboards, ...).
    # Note that the connection information to connect to the datasources
    # you want to explore are managed directly in the web UI
    SQLALCHEMY_DATABASE_URI = 'sqlite:////var/lib/superset/superset.db'
    # Flask-WTF flag for CSRF
    WTF_CSRF_ENABLED = True
    # Add endpoints that need to be exempt from CSRF protection
    WTF_CSRF_EXEMPT_LIST = []
    # Set this API key to enable Mapbox visualizations
    MAPBOX_API_KEY = ''

    DEBUG=True
    LOG_FORMAT = '%(asctime)s:%(levelname)s:%(name)s:%(message)s'
    LOG_LEVEL = 'DEBUG'
    
    AUTH_TYPE = AUTH_LDAP
    AUTH_LDAP_SERVER = "ldap://fadi-openldap:389"
    AUTH_LDAP_USE_TLS = False
    AUTH_USER_REGISTRATION = True 
    AUTH_LDAP_SEARCH = "dc=ldap,dc=cetic,dc=be"
    AUTH_LDAP_BIND_USER = "cn=admin,dc=ldap,dc=cetic,dc=be"
    AUTH_LDAP_BIND_PASSWORD = "password1"



# ------ auth ------

postgresql:
  enabled: false
  persistence:
    enabled: true

minio:
  enabled: false
  persistence:
    enabled: true
  service:
    type: LoadBalancer

grafana:
  enabled: true
  #LoadBalancer service
  service:
    type: LoadBalancer
  # Enable persistence
  persistence:
    enabled: true
  # Administrator credentials when not using an existing secret (see below)
  adminUser: admin
  adminPassword: password
  # ----- auth -------
  grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
## LDAP Authentication can be enabled with the following values on grafana.ini
## NOTE: Grafana will fail to start if the value for ldap.toml is invalid
  auth.ldap:
    enabled: true
    allow_sign_up: true
    config_file: /etc/grafana/ldap.toml

## Grafana's LDAP configuration
## Templated by the template in _helpers.tpl
## NOTE: To enable the grafana.ini must be configured with auth.ldap.enabled
## ref: http://docs.grafana.org/installation/configuration/#auth-ldap
## ref: http://docs.grafana.org/installation/ldap/#configuration
ldap:
  # `existingSecret` is a reference to an existing secret containing the ldap configuration
  # for Grafana in a key `ldap-toml`.
  existingSecret: ""
  # `config` is the content of `ldap.toml` that will be stored in the created secret
  config: |-
    verbose_logging = true

    [[servers]]

    host = "fadi-openldap"
    port = 389
    use_ssl = false
    start_tls = false
    ssl_skip_verify = false
    bind_dn = "CN=admin,DC=ldap,DC=cetic,DC=be"
    ##bind_password = 'password1'
    search_filter = "(cn=%s)"
    search_base_dns = ["DC=ldap,DC=cetic,DC=be"]
  
  # ----- auth -----


jupyterhub:
  enabled: true
  proxy:
    secretToken: 'af83775ec3bfaf0507ce596df51d491e7ed54450adc454038fa7405495465f19'
  hub:
    db:
      type: sqlite-memory
  rbac:
    enabled: true
  singleuser:
    storage:
      type: none
  # Defines the default image
    image:
      name: jupyter/minimal-notebook
      tag: 7d427e7a4dde
    profileList:
      - display_name: "Minimal environment"
        description: "To avoid too much bells and whistles: Python."
        default: true
      - display_name: "Datascience environment"
        description: "If you want the additional bells and whistles: Python, R, and Julia."
        kubespawner_override:
          image: jupyter/datascience-notebook:7d427e7a4dde
      - display_name: "Spark environment"
        description: "The Jupyter Stacks spark image"
        kubespawner_override:
          image: jupyter/all-spark-notebook:latest
  

  # ---- auth ----
  
  # auth:
  #   type: dummy
  #   whitelist:
  #     users:
  #   admin:
  #     access: true
  #     users:
  #       - admin
  #   dummy:
  #     password: 'password'
  #   ldap:
  #     dn:
  #       search: {}
  #       user: {}
  #     user: {}
  #   state:
  #     enabled: false
  #     cryptoKey:
  # prePuller:
  #   hook:
  #     enabled: false

  auth:
  type: ldap
  ldap:
    server:
      address: fadi-openldap
    dn:
      templates:
        - 'cn={username},cn=admin,dc=ldap,dc=cetic,dc=be'
        - 'uid={username},cn=admin,dc=ldap,dc=cetic,dc=be'

  # ---- auth ----

nifi:
  enabled: false

pgadmin:
  enabled: false

openldap:
  enabled: true

phpldap-admin:
  enabled: true